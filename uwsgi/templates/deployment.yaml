# Customizable uwsgi deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ template "fullname" . }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      tier: {{ .Values.deployment.labels.tier }}
{{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
  template:
    metadata:
      {{- if and .Values.deployment.metrics.enabled .Values.deployment.metrics.prometheus  }}
      annotations:
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        app: {{ template "fullname" . }}
        tier: {{ .Values.deployment.labels.tier }}

# Almost every variable has a default value, but take care of with some others
# like: repository, secretKey, passwordDB, that are mandatory but depends of each app.
    spec:
      containers:
# App container
        - name: {{ template "fullname" . }}
          image: {{ .Values.global.image.uwsgi }}:{{ .Values.deployment.image.tag }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          {{- if .Values.service.enabled }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          {{- end }}
          {{- if .Values.deployment.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.liveness.command }}
                - {{ .Values.deployment.probes.liveness.args }}
            failureThreshold: {{ .Values.deployment.probes.liveness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.liveness.delay }}
            periodSeconds: {{ .Values.deployment.probes.liveness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.liveness.timeout }}
          {{- end }}
          {{- if .Values.deployment.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.readiness.command }}
                - {{ .Values.deployment.probes.readiness.args }}
            failureThreshold: {{ .Values.deployment.probes.readiness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.readiness.delay }}
            periodSeconds: {{ .Values.deployment.probes.readiness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.readiness.timeout }}
          {{- end }}
# Definition of essentials environment variables. This could be provided from direct string,
# a secret key or a config map.
# The structure of Values are built so that you can define a set of secret keys and/or a set
# of config map to complete the most important environment variables.
# Take a look apps/template.yaml to know how specify it.
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}
            - secretRef:
                name: {{ .Release.Name }}
          {{- if .Values.databaseController.enabled }}
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: database-name
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: database-user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: database-password
          {{- end }}
          resources:
{{ toYaml .Values.deployment.resources | indent 12 }}
# This configuration could be used as a uwsgi app, cron, celery or django-rq deployment, so you
# can specify in Values if you want one or the other configuration.
          {{- if .Values.crons.enabled }}
          args: {{ .Values.crons.args }}
          {{- end }}
          {{- if .Values.celery.enabled }}
          args: {{ .Values.celery.args }}
          {{- end }}
          {{- if .Values.djangoRQ.enabled }}
          args: {{ .Values.djangoRQ.args }}
          {{- end }}
# Update the command
          {{- if .Values.deployment.command }}
          command:
            {{- range $cmd := .Values.deployment.command }}
            - {{ $cmd }}
            {{- end }}
          {{- end}}
# Update the command arguments
          {{- if .Values.deployment.args }}
          args:
            {{- range $arg := .Values.deployment.args }}
            - {{ $arg }}
            {{- end }}
          {{- end}}
# Cloud SQL proxy container
# The default configuration configure a proxy to a persistent database using a proxy container,
# but you can disable it with <deployment.cloudsqlProxy.enabled> value.
# Note: Is mandatory have generated a new service account for the project and have create a secret
# with the `json` resultant file account.
        {{- if .Values.deployment.cloudsqlProxy.enabled }}
        - name: {{ .Values.deployment.cloudsqlProxy.name }}
          image: "{{ .Values.global.image.cloudsqlProxy.image }}:{{ .Values.global.cloudsqlProxy.tag }}"
          imagePullPolicy: {{ .Values.deployment.cloudsqlProxy.pullPolicy }}
          {{- if .Values.global.cloudsqlProxy.ports }}
          ports:
{{ toYaml .Values.global.cloudsqlProxy.ports | indent 12 }}
          {{- end }}
          command:
            - /cloud_sql_proxy
            - --dir=/cloudsql
            - -instances={{ .Values.global.image.cloudsqlProxy.project }}:{{ .Values.global.image.cloudsqlProxy.zone }}:{{ .Values.global.image.cloudsqlProxy.name }}=tcp:{{ .Values.global.image.cloudsqlProxy.port }}
            - -credential_file=/secrets/cloudsql/{{ .Values.global.image.cloudsqlProxy.filename }}
          volumeMounts:
            - name: cloudsql-oauth-credentials
              mountPath: /secrets/cloudsql
              readOnly: True
            - name: ssl-certs
              mountPath: /etc/ssl/certs
        {{- end }}

# PgBouncer container
        {{- if .Values.deployment.pgBouncer.enabled }}
        - name: {{ .Release.Name }}-pgbouncer
          image: brainsam/pgbouncer:1.8.1
          env:
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: DATABASE_HOST
          - name: DB_PORT
            value: "{{ .Values.configMap.databasePort }}"
          {{- if .Values.databaseController.enabled }}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: database-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: database-password
          {{- else }}
          - name: DB_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: DATABASE_USER
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}
                key: DATABASE_PASSWORD
          {{- end }}
          - name: LISTEN_PORT
            value: "{{ .Values.deployment.pgBouncer.port }}"
          - name: LOGFILE
            value: /tmp/pgbouncer.log
          - name: POOL_MODE
            value: {{ .Values.deployment.pgBouncer.poolMode }}
          - name: MAX_CLIENT_CONN
            value: "{{ .Values.deployment.pgBouncer.maxClientConn }}"
          - name: MAX_DB_CONNECTIONS
            value: "{{ .Values.deployment.pgBouncer.maxDBConnections }}"
          - name: LISTEN_BACKLOG
            value: "{{ .Values.deployment.pgBouncer.listenBacklog }}"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: {{ .Values.deployment.pgBouncer.port }}
            name: postgres
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: {{ .Values.deployment.pgBouncer.port }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.deployment.pgBouncer.port }}
        {{- end }}
# Metrics containers
      {{- if .Values.deployment.metrics.enabled }}
      - name: {{ .Release.Name }}-uwsgi-exporter
        image: timonwong/uwsgi-exporter
        args:
        - --stats.uri=http://localhost:1717
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
          limits:
            cpu: 100m
            memory: 25Mi
        ports:
        - name: metrics
          containerPort: 9117
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9117
      {{- if .Values.deployment.pgBouncer.enabled }}
      - name: {{ .Release.Name }}-pgbouncer-exporter
        image: apsl/prometheus-pgbouncer-exporter
        args:
        - --config=/etc/pgbouncer-exporter/config.yml
        env:
        - name: PGBOUNCER_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: DATABASE_HOST
        - name: PGBOUNCER_PORT
          value: "{{ .Values.deployment.pgBouncer.port }}"
        {{- if .Values.databaseController.enabled }}
        - name: PGBOUNCER_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: database-user
        - name: PGBOUNCER_PASS
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: database-password
        {{- else }}
        - name: PGBOUNCER_USER
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}
              key: DATABASE_USER
        - name: PGBOUNCER_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}
              key: DATABASE_PASSWORD
        {{- end }}
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 50Mi
        ports:
        - name: metrics
          containerPort: 9127
      {{- end }}
      {{- if not .Values.deployment.metrics.prometheus }}
      - name: prometheus-to-sd
        image: gcr.io/google-containers/prometheus-to-sd:v0.3.1
        command:
        - /monitor
        - --source=:http://localhost:9117/metrics # uwsgi
        - --source=:http://localhost:8080/metrics # django
        {{- if .Values.deployment.pgBouncer.enabled }}
        - --source=:http://localhost:9127/metrics # pgbouncer
        {{- end }}
        - --stackdriver-prefix=custom.googleapis.com
        - --pod-id=$(POD_ID)
        - --namespace-id=$(POD_NAMESPACE)
        env:
        - name: POD_ID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 50Mi
      {{- end }}
      {{- end }}

      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}

      volumes:
# Only should mount the secrets if Cloud SQL proxy is enabled
        {{- if .Values.deployment.cloudsqlProxy.enabled }}
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        {{- end }}
