# Customizable uwsgi deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ template "fullname" . }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

spec:
  replicas: {{ .Values.replicaCount }}
{{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        tier: {{ .Values.deployment.labels.tier }}

# Almost every variable has a default value, but take care of with some others
# like: repository, secretKey, passwordDB, that are mandatory but depends of each app.
    spec:
      containers:
# App container
        - name: {{ template "fullname" . }}
          image: {{ .Values.global.image.uwsgi }}:{{ .Values.deployment.image.tag }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          {{- if .Values.service.enabled }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          {{- end }}
          {{- if .Values.deployment.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.liveness.command }}
                - {{ .Values.deployment.probes.liveness.args }}
            failureThreshold: {{ .Values.deployment.probes.liveness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.liveness.delay }}
            periodSeconds: {{ .Values.deployment.probes.liveness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.liveness.timeout }}
          {{- end }}
          {{- if .Values.deployment.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.readiness.command }}
                - {{ .Values.deployment.probes.readiness.args }}
            failureThreshold: {{ .Values.deployment.probes.readiness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.readiness.delay }}
            periodSeconds: {{ .Values.deployment.probes.readiness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.readiness.timeout }}
          {{- end }}
# Definition of essentials environment variables. This could be provided from direct string,
# a secret key or a config map.
# The structure of Values are built so that you can define a set of secret keys and/or a set
# of config map to complete the most important environment variables.
# Take a look apps/template.yaml to know how specify it.
          env:
            - name: ENABLE_BASIC_AUTH
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.enableBasicAuth
            - name: ENABLE_3W_REDIRECT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.enable3wRedirect
            - name: ENABLE_HTTPS_REDIRECT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.enableHttpsRedirect
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: django.secretKey
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.databaseHost
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.databasePort
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.databaseName
            - name: DATABASE_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.databaseUser
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: django.passwordDB
                  name: {{ .Release.Name }}
            - name: SENTRY_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}
                  key: django.enableSentry
            {{- if eq .Values.configMap.enableSentry "True"}}
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: django.sentryDSN
            {{- end }}
            - name: REDIS_HOST
              value: {{ .Release.Name }}-redis
            - name: REDIS_PORT
              value: "{{ .Values.deployment.redisPort }}"
# Environment variables to configure celery
            {{- if .Values.celery.enabled }}
            - name: CELERY_BACKEND_TYPE
              value: {{ .Values.celery.backend }}
            - name: CELERY_BACKEND_HOST
              value: "{{ .Values.celery.host }}"
            - name: CELERY_BACKEND_PORT
              value: "{{ .Values.celery.port }}"
            - name: CELERY_BACKEND_DATABASE
              value: "{{ .Values.celery.db }}"
            {{- if .Values.celery.flowerAuth }}
            - name: FLOWER_BASIC_AUTH
              value: {{ .Values.celery.flowerAuth }}
            {{- end }}
            {{- end }}
# Update environment variables with the secrets if has data defined
            {{- if .Values.global.dataSecrets }}
            {{ $releaseName := .Release.Name }}
            {{- range $secret := .Values.global.dataSecrets }}
            - name: {{ $secret.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $releaseName }}
                  key: {{ $secret.key }}
            {{- end }}
            {{- end }}
# Update environment variables with the config map values if has data defined
            {{- if .Values.global.dataConfigMap }}
            {{ $releaseName := .Release.Name }}
            {{- range $configmap := .Values.global.dataConfigMap }}
            - name: {{ $configmap.name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseName }}
                  key: {{ $configmap.key }}
            {{- end }}
            {{- end }}
          resources:
{{ toYaml .Values.deployment.resources | indent 12 }}
# This configuration could be used as a uwsgi app, cron, celery or django-rq deployment, so you
# can specify in Values if you want one or the other configuration.
          {{- if .Values.crons.enabled }}
          args: {{ .Values.crons.args }}
          {{- end }}
          {{- if .Values.celery.enabled }}
          args: {{ .Values.celery.args }}
          {{- end }}
          {{- if .Values.djangoRQ.enabled }}
          args: {{ .Values.djangoRQ.args }}
          {{- end }}
        {{- if .Values.deployment.cloudsqlProxy.enabled }}
# Cloud SQL proxy container
# The default configuration configure a proxy to a persistent database using a proxy container,
# but you can disable it with <deployment.cloudsqlProxy.enabled> value.
# Note: Is mandatory have generated a new service account for the project and have create a secret
# with the `json` resultant file account.
{{- if .Values.deployment.cloudsqlProxy.enabled }}
        - name: {{ .Values.deployment.cloudsqlProxy.name }}
          image: "gcr.io/cloudsql-docker/gce-proxy:{{ .Values.global.cloudsqlProxy.tag }}"
          imagePullPolicy: {{ .Values.deployment.cloudsqlProxy.pullPolicy }}
          {{- if .Values.global.cloudsqlProxy.ports }}
          ports:
{{ toYaml .Values.global.cloudsqlProxy.ports | indent 12 }}
          {{- end }}
          command:
            - /cloud_sql_proxy
            - --dir=/cloudsql
            - -instances={{ .Values.global.image.cloudsqlProxy.project }}:{{ .Values.global.image.cloudsqlProxy.zone }}:{{ .Values.global.image.cloudsqlProxy.name }}=tcp:{{ .Values.global.image.cloudsqlProxy.port }}
            - -credential_file=/secrets/cloudsql/{{ .Values.global.image.cloudsqlProxy.filename }}
          volumeMounts:
            - name: cloudsql-oauth-credentials
              mountPath: /secrets/cloudsql
              readOnly: True
            - name: ssl-certs
              mountPath: /etc/ssl/certs
        {{- end }}

      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}

      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
{{- end }}
