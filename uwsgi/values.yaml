# Default values for uwsgi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Extract to global variables those variables most
# susceptible to be overridden.
global:
  image:
    uwsgi: ""
    cloudsqlProxy:
      project: ""
      name: ""
      zone: ""
      port: 5432
      filename: cloudsql-authorization.json
      image: gcr.io/cloudsql-docker/gce-proxy
  cloudsqlProxy:
    tag: "1.11"
    ports:
      - name: postgres
        containerPort: 5432
  dataSecrets:
  dataConfigMap:


replicaCount: 1
strategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0


deployment:
  labels:
    tier: web
  image:
    tag: latest
    pullPolicy: Always
  probes:
    liveness:
      enabled: true
      command: /entrypoint.sh
      args: launch-liveness-probe
      delay: 45
      timeout: 5
      threshold: 5
      period: 30
      success: 1
    readiness:
      enabled: false
      command: /entrypoint.sh
      args: launch-readiness-probe
      delay: 10
      timeout: 5
      threshold: 5
      period: 30
      success: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  sentry:
    enabled: true
  redisHost: "10.0.0.3"
  redisPort: "6379"
  cloudsqlProxy:
    enabled: true
    name: cloudsql-proxy
    pullPolicy: IfNotPresent
  pgBouncer:
    enabled: false
    port: 6543
    poolMode: "transaction"
    maxClientConn: 128
    maxDBConnections: 2
    listenBacklog: 4096
  metrics:
    enabled: false
    prometheus: false

service:
    enabled: true
    type: NodePort
    externalPort: 80
    internalPort: 8080


configMap:
    enabled: true
    uwsgiAddr: "127.0.0.1:8080"
    enableBasicAuth: "True"
    enable3wRedirect: "True"
    enableHttpsRedirect: "True"
    databaseHost: "127.0.0.1"
    databasePort: "5432"
    databaseName: ""
    databaseUser: apsl
    enableSentry: "True"
    compressEnabled: "True"
    compressOffline: "True"
    allowedHosts: "*"


secrets:
  enabled: true
  type: Opaque
  cloudsql:
    name: cloudsql-oauth-credentials
  sentryDSN: ""
  passwordDB: ""


crons:
  enabled: false
  args:
    - run-crons


celery:
  enabled: false
  args:
    - run-celery
  flowerAuth: "demo:demo"
  backend: redis
  host: redis
  port: "6379"
  db: 1


djangoRQ:
  enabled: false
  args:
    - run-rq


databaseController:
  enabled: false
  secretName: db-secret