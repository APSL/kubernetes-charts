# Customizable celery deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ template "fullname" . }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      tier: {{ .Values.deployment.labels.tier }}
{{- if .Values.strategy }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq ".Values.strategy.type" "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.maxSurge }}
      maxUnavailable: {{ .Values.strategy.maxUnavailable }}
    {{- end }}
{{- end }}
  template:
    metadata:
      {{- if and .Values.deployment.metrics.enabled .Values.deployment.metrics.prometheus  }}
      annotations:
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        app: {{ template "fullname" . }}
        tier: {{ .Values.deployment.labels.tier }}

# Almost every variable has a default value, but take care of with some others
# like: repository, secretKey, passwordDB, that are mandatory but depends of each app.
    spec:
      containers:
# App container
        - name: {{ template "fullname" . }}
          image: {{ .Values.global.image.uwsgi }}:{{ .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          {{- if .Values.deployment.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.liveness.command }}
                - {{ .Values.deployment.probes.liveness.args }}
            failureThreshold: {{ .Values.deployment.probes.liveness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.liveness.delay }}
            periodSeconds: {{ .Values.deployment.probes.liveness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.liveness.timeout }}
          {{- end }}
          {{- if .Values.deployment.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command:
                - {{ .Values.deployment.probes.readiness.command }}
                - {{ .Values.deployment.probes.readiness.args }}
            failureThreshold: {{ .Values.deployment.probes.readiness.failures }}
            initialDelaySeconds: {{ .Values.deployment.probes.readiness.delay }}
            periodSeconds: {{ .Values.deployment.probes.readiness.period }}
            timeoutSeconds: {{ .Values.deployment.probes.readiness.timeout }}
          {{- end }}
# Definition of essentials environment variables. This could be provided from direct string,
# a secret key or a config map.
# The structure of Values are built so that you can define a set of secret keys and/or a set
# of config map to complete the most important environment variables.
# Take a look apps/template.yaml to know how specify it.
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}
            - secretRef:
                name: {{ .Release.Name }}
          {{- if .Values.global.databaseController.secret.shared }}
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.databaseController.secret.name }}-{{ .Release.Name }}
                  key: database-name
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.databaseController.secret.name }}-{{ .Release.Name }}
                  key: database-user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.databaseController.secret.name }}-{{ .Release.Name }}
                  key: database-password
          {{- end }}
          resources:
{{ toYaml .Values.deployment.resources | indent 12 }}
          args: {{ .Values.deployment.args }}

# PgBouncer container
        {{- if .Values.deployment.pgBouncer.enabled }}
        - name: {{ .Release.Name }}-pgbouncer
          image: brainsam/pgbouncer:1.8.1
          env:
          - name: DB_HOST
            value: "{{ .Values.global.cloudSql.host }}"
          - name: DB_PORT
            value: "{{ .Values.deployment.pgBouncer.targetPort }}"
          {{- if .Values.global.databaseController.secret.shared }}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.databaseController.secret.name }}-{{ .Release.Name }}
                key: database-user
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.databaseController.secret.name }}-{{ .Release.Name }}
                key: database-password
          {{- else }}
          - name: DB_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}
                key: DATABASE_USER
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}
                key: DATABASE_PASSWORD
          {{- end }}
          - name: LISTEN_PORT
            value: "{{ .Values.deployment.pgBouncer.port }}"
          - name: LOGFILE
            value: /tmp/pgbouncer.log
          - name: POOL_MODE
            value: {{ .Values.deployment.pgBouncer.poolMode }}
          - name: MAX_CLIENT_CONN
            value: "{{ .Values.deployment.pgBouncer.maxClientConn }}"
          - name: MAX_DB_CONNECTIONS
            value: "{{ .Values.deployment.pgBouncer.maxDBConnections }}"
          - name: LISTEN_BACKLOG
            value: "{{ .Values.deployment.pgBouncer.listenBacklog }}"
          - name: QUIET
            value: "true"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: {{ .Values.deployment.pgBouncer.port }}
            name: postgres
            protocol: TCP
          livenessProbe:
            tcpSocket:
              port: {{ .Values.deployment.pgBouncer.port }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.deployment.pgBouncer.port }}
        {{- end }}
# Metrics containers
        {{- if .Values.deployment.metrics.enabled }}
        - name: {{ .Release.Name }}-celery-exporter
          image: zerok/celery-prometheus-exporter:latest-celery4
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
            limits:
              cpu: 100m
              memory: 25Mi
          ports:
          - name: metrics
            containerPort: 8888
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-celery-exporter
        {{- if not .Values.deployment.metrics.prometheus }}
        - name: prometheus-to-sd
          image: gcr.io/google-containers/prometheus-to-sd:v0.3.1
          command:
          - /monitor
          - --source=:http://localhost:8888/metrics # celery
          - --stackdriver-prefix=custom.googleapis.com
          - --pod-id=$(POD_ID)
          - --namespace-id=$(POD_NAMESPACE)
          env:
          - name: POD_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 100m
              memory: 50Mi
        {{- end }}
        {{- end }}

      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      {{- end }}